class QuickSort {
	void Main(){
		int[] x;
		x = new int[10];
		x[0] = 7;
		x[1] = 1;
		x[2] = 0;
		x[3] = 9;
		x[4] = 2;
		x[5] = 3;
		x[6] = 6;
		x[7] = 8;
		x[8] = 5;
		x[9] = 4;
		//PrintArray(x);
		//WriteChar('\n');
		quickSort(x,0,x.length-1);
		PrintArray(x);
	}

	void PrintArray(int[] arr){
		int i;
		i = 0;
		while(i < arr.length - 1){
			WriteInt(arr[i]);
			WriteChar(',');
			i = i + 1;
		}
		if(arr.length > 0){
			WriteInt(arr[arr.length-1]);
		}
	}

	void quickSort(int[] arr, int low, int high){
		if(arr == null || arr.length == 0){
			return;
		}
		if(low >= high){
			return;
		}

		//pich the pivot element
		int middle;
		middle = low + (high - low) / 2;
		int pivot;
		pivot = arr[middle];
		int i;
		i = low;
		int j;
		j = high;

		//make left < pivot and right > pivot
		while(i <= j){
			while(arr[i] < pivot){
				i = i + 1;
			}
			while(arr[j] > pivot){
				j = j - 1;
			}

			//swap elements
			if(i <= j){
				int temp;
				temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
				i = i + 1;
				j = j - 1;
			}
		}

		// recursively sort two sub parts
		if(low < j){
			quickSort(arr, low, j);
		}
		if(high > i){
			quickSort(arr, i, high);
		}
	}
}