    class Node
    {
        int key;
        int height;
        Node left;
        Node right;
    }

    class AVLTree
    {
        Node root;

        int height(Node n)
        {
            if (n == null)
            {
                return 0;
            }
            return n.height;
        }

        int max(int a, int b)
        {
            if (a > b)
            {
                return a;
            }
            return b;
        }

        Node rightRotate(Node y)
        {
            Node x;
            x = y.left;
            Node t2;
            t2 = x.right;
            x.right = y;
            y.left = t2;

            y.height = max(height(y.left), height(y.right)) + 1;
            x.height = max(height(x.left), height(x.right)) + 1;

            return x;
        }
        Node leftRotate(Node x)
        {
            Node y;
            y = x.right;
            Node t2;
            t2 = y.left;

            y.left = x;
            x.right = t2;

            x.height = max(height(x.left), height(x.right)) + 1;
            y.height = max(height(y.left), height(y.right)) + 1;

            return y;
        }

        int getBalance(Node n)
        {
            if (n == null)
            {
                return 0;
            }
            return height(n.left) - height(n.right);
        }

        Node insert(Node node, int key)
        {

            if (node == null)
            {
                Node rNode;
                rNode = new Node();
                rNode.key = key;
                rNode.height = 1;
                return rNode;
            }

            if (key < node.key)
            {
                node.left = insert(node.left, key);
            }
            else
            {
                if (key > node.key)
                {
                    node.right = insert(node.right, key);
                }
                else
                {
                    return node;
                }
            }
            node.height = 1 + max(height(node.left),
                                  height(node.right));


            int balance;
            balance = getBalance(node);


            if (balance > 1 && key < node.left.key)
            {
                return rightRotate(node);
            }
            if (balance < -1 && key > node.right.key)
            {
                return leftRotate(node);
            }
            if (balance > 1 && key > node.left.key)
            {
                node.left = leftRotate(node.left);
                return rightRotate(node);
            }

            if (balance < -1 && key < node.right.key)
            {
                node.right = rightRotate(node.right);
                return leftRotate(node);
            }

            return node;
        }
    void preOrder(Node node)
    {
        if (node != null)
        {
            WriteInt(node.key);
            WriteString(" ");
            preOrder(node.left);
            preOrder(node.right);

        }
    }
}

class Traverser
{
    void Main()
    {
        AVLTree tree;
        tree = new AVLTree();

        tree.root = tree.insert(tree.root, 10);
        tree.root = tree.insert(tree.root, 20);
        tree.root = tree.insert(tree.root, 30);
        tree.root = tree.insert(tree.root, 40);
        tree.root = tree.insert(tree.root, 50);
        tree.root = tree.insert(tree.root, 25);
        tree.preOrder(tree.root);
    }
}
