 class ShortestPath{

        int vertices;
        int minDistance(int[] dist, bool[] sptSet)
        {
            vertices = 9;
            // Initialize min value
            int min;
            int minindex;
            minindex = -1;
            min = 2147483647;
            int v;
            v = 0;
            while(v <vertices) {
                if (sptSet[v] == false && dist[v] <= min)
                {
                    min = dist[v];
                    minindex = v;
                }
                v = v + 1;
            }
            return minindex;
        }

        void printSolution(int[] dist, int n)
        {
            vertices = 9;
            int i;
            i = 0;
            while(i <vertices) {
                WriteInt(i);
                WriteString(" ");
                WriteInt(dist[i]);
                WriteString("\n");
                i = i+1;
            }
        }

        void dijkstra(int[][] graph, int src)
        {
            int[] dist;
            dist = new int[9];

            bool[] sptSet;
            sptSet = new bool[9];
            int i;
            i = 0;
            while(i <9)
            {
                dist[i] = 2147483647;
                sptSet[i] = false;
                i = i + 1;
            }

            dist[src] = 0;
            int count;
            count = 0;
            while(count < 9 - 1)
            {

                int u;
                u = minDistance(dist, sptSet);
                sptSet[u] = true;
                int v;
                v = 0;
                while(v < 9) {

                    if (!sptSet[v] && graph[u][v] != 0 &&
                            dist[u] != 2147483647 &&
                            dist[u] + graph[u][v] < dist[v]) {
                        dist[v] = dist[u] + graph[u][v];
                    }
                    v = v + 1;
                }            
                count = count + 1;
            }

            printSolution(dist, 9);
        }

        void Main()
        {

            int[][] graph;
            graph = new int[9][];
            int i;
            i = 0;
            while(i < 9)
            {
                graph[i] = new int[9];
                i = i +1;
            }
            graph[0][0] = 0;
            graph[0][1] = 4;
            graph[0][2] = 0;
            graph[0][3] = 0;
            graph[0][4] = 0;
            graph[0][5] = 0;
            graph[0][6] = 0;
            graph[0][7] = 8;
            graph[0][8] = 0;

            graph[1][0] = 4;
            graph[1][1] = 0;
            graph[1][2] = 8;
            graph[1][3] = 0;
            graph[1][4] = 0;
            graph[1][5] = 0;
            graph[1][6] = 0;
            graph[1][7] = 11;
            graph[1][8] = 0;


            graph[2][0] = 0;
            graph[2][1] = 8;
            graph[2][2] = 0;
            graph[2][3] = 7;
            graph[2][4] = 0;
            graph[2][5] = 4;
            graph[2][6] = 0;
            graph[2][7] = 0;
            graph[2][8] = 2;


            graph[3][0] = 0;
            graph[3][1] = 0;
            graph[3][2] = 7;
            graph[3][3] = 0;
            graph[3][4] = 9;
            graph[3][5] = 14;
            graph[3][6] = 0;
            graph[3][7] = 0;
            graph[3][8] = 0;


            graph[4][0] = 0;
            graph[4][1] = 0;
            graph[4][2] = 0;
            graph[4][3] = 9;
            graph[4][4] = 0;
            graph[4][5] = 10;
            graph[4][6] = 0;
            graph[4][7] = 0;
            graph[4][8] = 0;



            graph[5][0] = 0;
            graph[5][1] = 0;
            graph[5][2] = 4;
            graph[5][3] = 14;
            graph[5][4] = 10;
            graph[5][5] = 0;
            graph[5][6] = 2;
            graph[5][7] = 0;
            graph[5][8] = 0;
			graph[6][0] = 0;
            graph[6][1] = 0;
            graph[6][2] = 0;
            graph[6][3] = 0;
            graph[6][4] = 0;
            graph[6][5] = 2;
            graph[6][6] = 0;
            graph[6][7] = 1;
            graph[6][8] = 6;


            graph[7][0] = 8;
            graph[7][1] = 11;
            graph[7][2] = 0;
            graph[7][3] = 0;
            graph[7][4] = 0;
            graph[7][5] = 0;
            graph[7][6] = 1;
            graph[7][7] = 0;
            graph[7][8] = 7;

            graph[8][0] = 0;
            graph[8][1] = 0;
            graph[8][2] = 2;
            graph[8][3] = 0;
            graph[8][4] = 0;
            graph[8][5] = 0;
            graph[8][6] = 6;
            graph[8][7] = 7;
            graph[8][8] = 0;

            ShortestPath t;
            t = new ShortestPath();
            t.dijkstra(graph, 0);
        }
    }
